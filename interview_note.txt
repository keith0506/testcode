netstat

tcpdump

ipcs

ipcrm

awk

sed

c进程内存空间分布
  1、栈区(stack)： 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。
  2、堆区(heap)： 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收。
  注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。
  3、全局区(static)： 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，
  未初始化的全局变量和未初始化的静态变量在相邻的另一块区域，程序结束后有系统释放 。
  4、文字常量区： 常量字符串就是放在这里的， 程序结束后由系统释放。
  5、程序代码区： 存放函数体的二进制代码。
那些东西是线程私有的: 寄存器

linux内存管理机制
linux任务调度机制

什么是死锁，如何避免死锁？
  当然死锁的产生是必须要满足一些特定条件的： 
  1.互斥条件：进程对于所分配到的资源具有排它性，即一个资源只能被一个进程占用，直到被该进程释放 
  2.请求和保持条件：一个进程因请求被占用资源而发生阻塞时，对已获得的资源保持不放。 
  3.不剥夺条件：任何一个资源在没被该进程释放之前，任何其他进程都无法对他剥夺占用 
  4.循环等待条件：当发生死锁时，所等待的进程必定会形成一个环路（类似于死循环），造成永久阻塞。
  *加锁顺序
  *加锁时限
  *死锁检测
如何实现守护进程？
关键字static的作用是什么?
const -> readonly
#define SECONDS_PER_YEAR (60 * 60 * 24 * 365)UL
#define MIN(A,B) （（A） <= (B) ? (A) : (B))
a) int a; // An integer
b) int *a; // A pointer to an integer
c) int **a; // A pointer to a pointer to an integer
d) int a[10]; // An array of 10 integers
e) int *a[10]; // An array of 10 pointers to integers
f) int (*a)[10]; // A pointer to an array of 10 integers
g) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integer
h) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer

// Set the third bit
#define BIT3 (0x1 << 3)
static int a;
void set_bit3(void)
{
    a |= BIT3;
}
void clear_bit3(void)
{
    a &= ~BIT3;
}

//Access address 0x67a9
int *ptr;
ptr = (int *)0x67a9;
*ptr = 0xaa55;

关键字volatile有什么含意?并给出三个不同的例子。
      一个定义为volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。下面是volatile变量的几个例子：
1) 并行设备的硬件寄存器（如：状态寄存器）
2) 一个中断服务子程序中会访问到的非自动变量(Non-automatic variables)
3) 多线程应用中被几个任务共享的变量